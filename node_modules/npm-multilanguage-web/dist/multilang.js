(function (f) {
    if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f();
    } else if (typeof define === "function" && define.amd) {
        define([], f);
    } else {
        var g;
        if (typeof window !== "undefined") {
            g = window;
        } else if (typeof global !== "undefined") {
            g = global;
        } else if (typeof self !== "undefined") {
            g = self;
        } else {
            g = this;
        }
        g.multilang = f();
    }
})(function () {
    var define, module, exports;
    return (function () {
        function r(e, n, t) {
            function o(i, f) {
                if (!n[i]) {
                    if (!e[i]) {
                        var c = "function" == typeof require && require;
                        if (!f && c) return c(i, !0);
                        if (u) return u(i, !0);
                        var a = new Error("Cannot find module '" + i + "'");
                        throw ((a.code = "MODULE_NOT_FOUND"), a);
                    }
                    var p = (n[i] = { exports: {} });
                    e[i][0].call(
                        p.exports,
                        function (r) {
                            var n = e[i][1][r];
                            return o(n || r);
                        },
                        p,
                        p.exports,
                        r,
                        e,
                        n,
                        t
                    );
                }
                return n[i].exports;
            }
            for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
            return o;
        }
        return r;
    })()(
        {
            1: [
                function (require, module, exports) {
                    const translate = function (options) {
                        this.idioma = localStorage.getItem("idioma");
                        this.idioma = this.idioma == null ? options.default : this.idioma;

                        fetch("/lang/" + this.idioma + ".json")
                            .then((response) => response.json())
                            .then((fileJson) => {
                                let dataKey = document.querySelectorAll("." + options.classElements);
                                dataKey.forEach(function (element, key) {
                                    let searchKeyInJson = element.getAttribute(options.attrKey);
                                    let textResult = searchInJson(fileJson, searchKeyInJson);
                                    element.innerHTML = textResult;
                                });
                            });

                        let btnChangeLang = document.querySelectorAll("." + options.btnClassChange);
                        btnChangeLang.forEach(function (element) {
                            element.addEventListener("click", function (e) {
                                localStorage.setItem("idioma", this.dataset.lang);
                                location.reload();
                            });
                        });
                    };

                    const searchInJson = function (json, search) {
                        let arraySearch = search.split(".");
                        let response = "";
                        // Nivel del json | Para revisar luego con mas calma esta funcion | Buscar forma mas optima
                        switch (arraySearch.length) {
                            case 1:
                                response = json[arraySearch[0]][arraySearch[1]];
                                break;
                            case 2:
                                response = json[arraySearch[0]][arraySearch[1]];
                                break;
                            case 3:
                                response = json[arraySearch[0]][arraySearch[1]][arraySearch[2]];
                                break;
                            case 4:
                                response = json[arraySearch[0]][arraySearch[1]][arraySearch[2]][arraySearch[3]];
                                break;
                            case 5:
                                response = json[arraySearch[0]][arraySearch[1]][arraySearch[2]][arraySearch[3]][arraySearch[4]];
                                break;
                        }
                        return response;
                    };

                    module.exports = { translate: translate };
                },
                {},
            ],
        },
        {},
        [1]
    )(1);
});
